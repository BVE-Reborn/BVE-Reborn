name: build
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        rust: [nightly-2020-02-05]
        os: [windows-2019, ubuntu-18.04]
        include:
          - rust: nightly-2020-02-05
            triple: x86_64-pc-windows-msvc
            os: windows-2019
            name: windows-nightly

#          - rust: nightly-2020-02-05
#            triple: x86_64-apple-darwin
#            os: macos-latest
#            name: mac-nightly

          - rust: nightly-2020-02-05
            triple: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
            name: linux-nightly
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set Env (win)
        run: echo "::add-path::$env:HOME\.cargo\bin"
        shell: powershell
        if: matrix.os == 'windows-2019'

      - name: Set Env (nix)
        run: echo "::add-path::$HOME/.cargo/bin"
        shell: bash
        if: matrix.os != 'windows-2019'

      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache scoop
        uses: actions/cache@v1
        env:
          cache-name: scoop
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os }}-${{ env.cache-name }}
        if: matrix.os == 'windows-2019'

      - name: Cache cargo registry
        uses: actions/cache@v1
        env:
          cache-name: cargo-registry
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ matrix.os }}-${{ env.cache-name }}-

      - name: Cache cargo index
        uses: actions/cache@v1
        env:
          cache-name: cargo-index
        with:
          path: ~/.cargo/git
          key: ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ matrix.os }}-${{ env.cache-name }}-

      - name: Cache build
        uses: actions/cache@v1
        env:
          cache-name: build
        with:
          path: target
          key: ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.os }}-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-
            ${{ matrix.os }}-${{ env.cache-name }}-

      - name: Install Rustup
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain none --profile minimal -y
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-2019'
        shell: bash

      - name: Update Rustup
        run: |
          rustup self update
          rustup set profile minimal
        shell: bash

      - name: Install Rust ${{ matrix.rust }}
        # we need rustfmt for bindgen
        run: |
          rustup set default-host ${{ matrix.triple }}
          rustup toolchain install ${{ matrix.rust }}
          rustup component add --toolchain ${{ matrix.rust }} rustfmt
        shell: bash

      - name: Install scoop
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          echo "::set-env name=PATH::$env:PATH"
        if: matrix.os == 'windows-2019'
        shell: powershell

      - name: Install deps (win)
        run: |
          scoop install llvm ninja
          export LIBCLANG_PATH=$HOME/scoop/apps/llvm/current/bin
          echo "::set-env name=LIBCLANG_PATH::$LIBCLANG_PATH"
        if: matrix.os == 'windows-2019'
        shell: bash

      - name: Install deps (linux)
        run: |
          sudo apt update
          sudo apt install libsdl2-dev # not needed, but good for transitives dependencies
        if: matrix.os == 'ubuntu-18.04'
        shell: bash

      - name: Build C API
        run: |
          cargo run --bin bve-build -- --color=always --no-build
        shell: bash

      - name: Build
        run: |
          cargo build --all
        shell: bash

      - name: Run tests
        run: |
          cargo test --all
        shell: bash

      - name: Docs
        run: |
          cargo doc --all --no-deps
        shell: bash

      - name: CMake on C API
        run: |
          mkdir -p target/capi/debug/
          cd target/capi/debug/
          cmake ../../../bve-native/tests/
          cmake --build .
          cd -
        shell: bash

      - name: Run C API (win)
        run: |
          target/capi/debug/Debug/bve-native-c.exe
          target/capi/debug/Debug/bve-native-c.exe
        shell: bash
        if: matrix.os == 'windows-2019'

      - name: Run C API (unix)
        run: |
          target/capi/debug/bve-native-c
          target/capi/debug/bve-native-cpp
        shell: bash
        if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-18.04'
